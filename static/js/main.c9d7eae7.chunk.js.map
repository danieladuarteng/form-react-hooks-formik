{"version":3,"sources":["components/Form.formik.js","components/Header.js","components/Inputs.js","components/Footer.js","components/Form.js","components/App.js","serviceWorker.js","index.js"],"names":["formSchema","yup","shape","stickers","react","vue","angular","test","obj","count","integer","positive","description","initialData","formik","displayName","handleSubmit","values","bag","data","mapValuesToData","props","enableReinitialize","mapPropsToValues","validationSchema","Header","title","subTitle","interTitle","Inputs","checkErrors","Object","keys","errors","length","id","type","name","aria-labelledby","aria-describedby","onChange","handleChange","value","required","enableStickerOptions","htmlFor","className","disabled","enableStickersButton","onClick","e","preventDefault","setCount","setFieldValue","xmlns","width","height","d","undefined","defaultValue","placeholder","Footer","callback","enableSendButton","Form","useState","autoComplete","noValidate","onSubmit","result","defaultProps","withFormik","App","setCallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c9d7eae7.chunk.js","sourcesContent":["import * as yup from \"yup\";\r\n\r\nexport const formSchema = yup.object().shape({\r\n  stickers: yup.object({\r\n    react: yup.boolean(),\r\n    vue: yup.boolean(),\r\n    angular: yup.boolean(),\r\n  })\r\n  .test(\r\n    'myCustomTest',\r\n    null,\r\n    (obj) => {\r\n      if ( obj.react || obj.vue || obj.angular ) {\r\n        return true;\r\n      }\r\n      return new yup.ValidationError(\r\n        'Please check at least one checkbox',\r\n        null,\r\n        'stickers'\r\n      );\r\n    }\r\n  ),\r\n\r\n  count: yup.number()\r\n  .integer()\r\n  .positive(),\r\n  description: yup.string(),\r\n});\r\n\r\nconst initialData = {\r\n  stickers: {\r\n    react: false,\r\n    vue: false,\r\n    angular: false,\r\n  },\r\n  count: 0,\r\n  description: ''\r\n};\r\n\r\nconst mapDataToValues = data => ({\r\n  stickers: data.stickers,\r\n  count: data.count,\r\n  description: data.description\r\n});\r\n\r\nconst mapValuesToData = values => ({\r\n  stickers: values.stickers,\r\n  count: values.count,\r\n  description: values.description\r\n});\r\n\r\nexport const formik = {\r\n  displayName: \"App\",\r\n  handleSubmit: (values, bag) => {\r\n    const data = mapValuesToData(values);\r\n    bag.props.handleSubmit(data);\r\n  },\r\n  enableReinitialize: true,\r\n  mapPropsToValues: props => {\r\n    if (!props.initialData) return initialData;\r\n    return mapDataToValues(props.initialData);\r\n  },\r\n  validationSchema: () => formSchema\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Header(props){\r\n  return (\r\n    <header>\r\n      <h1>\r\n        {props.title}<br/>\r\n        {props.subTitle}<br/>\r\n        <strong>{props.interTitle}</strong>\r\n      </h1>\r\n    </header>\r\n  )\r\n}\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  subTitle: PropTypes.string.isRequired,\r\n  interTitle: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Inputs(props) {\r\n\r\n  const checkErrors = Object.keys(props.errors).length !== 0;\r\n\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <legend>Quais stickers:</legend>\r\n\r\n          <input\r\n            id='react'\r\n            type='checkbox'\r\n            name='stickers.react'\r\n            aria-labelledby='label-react'\r\n            aria-describedby='Option react'\r\n            onChange={props.handleChange}\r\n            value={props.react}\r\n            required={checkErrors && props.enableStickerOptions}\r\n          />\r\n          <label id='label-react'  htmlFor='react'>\r\n            React\r\n          </label>\r\n\r\n          <div>\r\n            <input\r\n              id='vue'\r\n              type='checkbox'\r\n              name='stickers.vue'\r\n              aria-labelledby='label-vue'\r\n              aria-describedby='Option vue'\r\n              onChange={props.handleChange}\r\n              value={props.vue}\r\n              required={checkErrors && props.enableStickerOptions}\r\n            />\r\n            <label id='label-vue' htmlFor='vue'>\r\n              Vue\r\n            </label>\r\n          </div>\r\n\r\n          <div>\r\n            <input\r\n              id='angular'\r\n              type='checkbox'\r\n              name='stickers.angular'\r\n              aria-labelledby='label-angular'\r\n              aria-describedby='Option angular'\r\n              onChange={props.handleChange}\r\n              value={props.angular}\r\n              required={checkErrors && props.enableStickerOptions}\r\n            />\r\n            <label id='label-angular ' htmlFor='angular'>\r\n              Angular\r\n            </label>\r\n          </div>\r\n      </fieldset>\r\n\r\n        <fieldset>\r\n          <legend>Quantos stickers de cada?</legend>\r\n          <div className='counter'>\r\n            <button\r\n              disabled={props.enableStickersButton}\r\n              onClick={e => {\r\n                e.preventDefault();\r\n                props.setCount(props.count - 1);\r\n                props.setFieldValue('count', props.count -1);\r\n              }}\r\n            >\r\n              <svg xmlns='http://www.w3.org/2000/svg' width='42' height='42'>\r\n                <path d='M4.667 0A4.668 4.668 0 0 0 0 4.667v32.666A4.668 4.668 0 0 0 4.667 42h32.666A4.668 4.668 0 0 0 42 37.333V4.667A4.668 4.668 0 0 0 37.333 0H4.667zm28 23.333H9.333v-4.666h23.334v4.666z' />\r\n              </svg>\r\n            </button>\r\n\r\n            <output\r\n              className={\r\n                checkErrors && props.count === 0 ? 'countInvalid': undefined\r\n              }\r\n              name='count'\r\n            >\r\n              {props.count}\r\n            </output>\r\n\r\n            <button\r\n              onClick={e => {\r\n                e.preventDefault();\r\n                props.setCount(props.count + 1);\r\n                props.setFieldValue('count', props.count +1);\r\n              }}\r\n            >\r\n              <svg xmlns='http://www.w3.org/2000/svg' width='42' height='42'>\r\n                <path d='M4.667 42h32.666A4.668 4.668 0 0 0 42 37.333V4.667A4.668 4.668 0 0 0 37.333 0H4.667A4.668 4.668 0 0 0 0 4.667v32.666A4.668 4.668 0 0 0 4.667 42zm4.666-23.333h9.334V9.333h4.666v9.334h9.334v4.666h-9.334v9.334h-4.666v-9.334H9.333v-4.666z' />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        </fieldset>\r\n\r\n        <fieldset>\r\n          <legend>Observações:</legend>\r\n            <textarea\r\n              name='description'\r\n              onChange={props.handleChange}\r\n              defaultValue={props.description}\r\n              placeholder='Alguma dúvida? Recado?'\r\n            />\r\n        </fieldset>\r\n    </>\r\n  )\r\n}\r\n\r\nInputs.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  react: PropTypes.bool.isRequired,\r\n  vue: PropTypes.bool.isRequired,\r\n  angular: PropTypes.bool.isRequired,\r\n  description: PropTypes.string.isRequired,\r\n  handleChange: PropTypes.func.isRequired,\r\n  enableStickerOptions: PropTypes.bool.isRequired,\r\n  enableStickersButton: PropTypes.bool.isRequired,\r\n  setCount: PropTypes.func.isRequired,\r\n  setFieldValue: PropTypes.func.isRequired,\r\n  errors: PropTypes.shape({}).isRequired,\r\n}\r\n\r\nexport default Inputs;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Footer(props){\r\n  return (\r\n    <footer\r\n      className={props.callback ? 'footerWithCallback' : 'footerWithoutCallback'}\r\n    >\r\n      {props.callback && Object.keys(props.errors).length === 0 &&\r\n        (\r\n          <p>Formulário enviado com sucesso</p>\r\n        )\r\n      }\r\n      <button\r\n        disabled={props.enableSendButton}\r\n      >\r\n        Enviar\r\n      </button>\r\n    </footer>\r\n  )\r\n}\r\n\r\nFooter.propTypes = {\r\n  callback: PropTypes.bool.isRequired,\r\n  errors: PropTypes.shape({}).isRequired,\r\n  enableSendButton: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default Footer;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withFormik } from 'formik';\r\nimport { formik } from './Form.formik';\r\nimport Header from './Header';\r\nimport Inputs from './Inputs';\r\nimport Footer from './Footer';\r\nimport './Form.css';\r\n\r\nfunction Form(props) {\r\n  const [count, setCount] = useState(0);\r\n\r\n  const {\r\n    values: {\r\n      stickers: { react, vue, angular},\r\n      description,\r\n    },\r\n    callback,\r\n    errors,\r\n    handleChange,\r\n    handleSubmit,\r\n    setFieldValue\r\n  } = props;\r\n\r\n  const enableSendButton = () => {\r\n    let result = true;\r\n\r\n    if (react || angular || vue) result = false;\r\n    if(count <= 0) result = true;\r\n    if(Object.keys(errors).length !== 0) result = true;\r\n\r\n    return result;\r\n  }\r\n\r\n  const enableStickerOptions = () => {\r\n    let result = true;\r\n\r\n    if (react || angular || vue) result = false;\r\n\r\n    return result;\r\n  }\r\n\r\n  const enableStickersButton = () => {\r\n    let result = false;\r\n\r\n    if(count <= 0 ) result = true;\r\n\r\n    return result;\r\n  }\r\n\r\n  return (\r\n    <form\r\n      autoComplete='off'\r\n      noValidate\r\n      onSubmit={handleSubmit}\r\n    >\r\n      <Header\r\n        title='Formulário'\r\n        subTitle='para compra de'\r\n        interTitle='Pacote de Stickers'\r\n      />\r\n\r\n      <Inputs\r\n        errors={errors}\r\n        count={count}\r\n        react={react}\r\n        vue={vue}\r\n        angular={angular}\r\n        description={description}\r\n        handleChange={handleChange}\r\n        enableStickerOptions={enableStickerOptions()}\r\n        enableStickersButton={enableStickersButton()}\r\n        setCount={setCount}\r\n        setFieldValue={setFieldValue}\r\n      />\r\n\r\n      <Footer\r\n        callback={callback}\r\n        errors={errors}\r\n        enableSendButton={enableSendButton()}\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\n\r\nForm.propTypes = {\r\n  callback: PropTypes.bool,\r\n  errors: PropTypes.shape({}),\r\n  handleSubmit: PropTypes.func,\r\n  handleChange: PropTypes.func,\r\n  setFieldValue:PropTypes.func,\r\n  values: PropTypes.shape({\r\n    stickers:  PropTypes.shape({\r\n      react:PropTypes.bool,\r\n      vue:PropTypes.bool,\r\n      angular:PropTypes.bool,\r\n    }),\r\n    description: PropTypes.string,\r\n    count: PropTypes.number,\r\n  })\r\n};\r\n\r\nForm.defaultProps = {\r\n  callback: false,\r\n  errors: {},\r\n  handleSubmit: () => {},\r\n  handleChange: () => {},\r\n  setFieldValue:() => {},\r\n  values:{\r\n    stickers:  {\r\n      react:false,\r\n      vue:false,\r\n      angular:false,\r\n    },\r\n    description: '',\r\n    count: 0,\r\n  }\r\n};\r\n\r\n\r\nexport default withFormik(formik)(Form);\r\n","import React, { useState } from \"react\";\nimport Form from './Form';\n\nfunction App (props) {\n  const [callback, setCallback] = useState(false);\n\n  const handleSubmit = (data) => {\n    setCallback(true)\n  }\n\n    return (\n      <Form\n        handleSubmit={handleSubmit}\n        callback={callback}\n      />\n    );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}